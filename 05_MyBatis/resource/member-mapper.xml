<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">
<!-- namespace : 각 mapper의 고유한 별칭 다른 매퍼파일과 중복되면 안됨 -->
	<!-- 
		* DML일 경우
		<insert id="각 SQL문의 식별자" parameterType="SQL문을 실행할 때 필요한 자바타입">
			쿼리문
		</insert>
		<update></update>
		<delete></delete>
		
		* SELECT일 경우
		<select id="각 SQL문의 식별자" 
		parameterType="SQL문을 실행할 때 필요한 자바타입"
		resultType="조회결과를 반환하는 자바타입" 또는
		resultMap="조회결과를 반환할 resultMap의 id속성값">
			쿼리문
		</select>
		=> parameterType은 전다랃을 값이 없다면 생략이 가능함
		==> count(*) => 정수 / 중복체크 => 문자열
		=> SELECT문의 경우 반드시 어떤 형태로 반환할지를 속성으로 명시해야 함.
		
		==> 그동안 pstmt객체를 이용해서 ?를 썻지만,
		앞으로는 위치홀더 대신 해당 sql문에 전달된 객체로부터 값을 꺼내서 사용! => 내부적으로는 getter호출!
		getter호출방법 == #{필드명 또는 변수명 또는 map의 키값}
	-->

	<insert id="save"
	parameterType="com.kh.statement.model.vo.Member">
		INSERT
		  INTO
		       MEMBER
		VALUES
		       (
		       SEQ_USERNO.NEXTVAL
		     , #{userId}
		     , #{userPwd}
		     , #{userName}
		     , #{email}
		     , SYSDATE
		       )
	</insert>
	
	
	<!-- 
		지금 사용하는 SLECT문에는 resultMap 필요 없지만 일단, 알아보고자 사용하고자한다. 
		*코드 줄여주는 담당 단, 단순함이 아닌 "복잡한 코드"에서 필요하다.
		* sql 단순한데 사용하는 경우는 낭비..
		* resultMap : 마이바티스에서 가장 중요하고 강력한 요소
					  ResultSet으로부터 조회한 컬럼의 값을 하나씩 뽑아서 
					  우리가 만든 VO객체에 각 필드에 담는 JDBC코드를 줄여주는 역할 수행
					  
		아래 코드를 줄여주는 작업이다.
		while(rset.next()){
			Member member = new Member();
			member.setUserNo(rset.getInt("USERNO"));
			...
			members.add(member);
		}
		
		<resultMap id="식별자" type="매핑하고자하는 자바객체의 타입(풀클래스명)">
			<result column="조회된 결과를 뽑고자하는 컬럼명" property="해당 결과를 매핑할 필드명" />
			
			예시)
			<result column="USERNO" property="userNo"/>	 컬럼  필드
		</resultMap>
		
	-->
	<!-- 
	<resultMap id="memberResultSet" 
	           type="com.kh.statement.model.vo.Member">
	   <result column="USERNO" property="userNo"/> 
	   <result column="USERID" property="userId" />
	   <result column="USERPWD" property="userPwd"/>
	   <result column="USERNAME" property="userName"/>
	   <result column="EMAIL" property="email"/>
	   <result column="ENROLLDATE" property="enrollDate"/>
	</resultMap>
	 -->
	<!-- <select id="findAll" resultMap="memberResultSet">--> <!-- resultMap 의 id -->
  	<select id="findAll" resultType="com.kh.statement.model.vo.Member"><!-- 이경우는 auto mapping -->
		SELECT
		       USERNO
		     , USERID
		     , USERPWD
		     , USERNAME
		     , EMAIL
		     , ENROLLDATE
		  FROM
		       MEMBER
		 ORDER
		    BY
		       ENROLLDATE DESC
	</select>
	
	<!-- 
		parameterType 매개변수타입 
		#{userId} 컨벤션을 위해서 변수명 userId 맞춰주기!!
	-->
	<select id="findById"
			parameterType="String"
			resultType="com.kh.statement.model.vo.Member">
		SELECT
		       USERNO
		     , USERID
		     , USERPWD
		     , USERNAME
		     , EMAIL
		     , ENROLLDATE
		  FROM
		       MEMBER
		 WHERE
		       USERID = #{userId} 
	</select>
	
	
	<select id="findByKeyword"
			parameterType="String"
			resultType="Member"> <!--config 에 typeAliases의 별칭을 지정해 놨기 때문에 Member를 사용한다. -->
		SELECT
		       USERNO
		     , USERID
		     , USERPWD
		     , USERNAME
		     , EMAIL
		     , ENROLLDATE
		  FROM
		       MEMBER
		  WHERE
		       USERNAME LIKE '%'|| #{keyword} || '%'
	</select>
	
	<!-- #{newPassword} prepareStatement / ${newPassword}는 보안에 취약 statement -->
	<!-- parameterType 별칭 가능 -->
	<update id="update" parameterType="com.kh.statement.model.dto.PasswordDTO">
		UPDATE
		       MEMBER
		   SET
		       USERPWD = #{newPassword}
		 WHERE
		       USERID = #{userId}
		   AND
		       USERPWD = #{userPwd}
	</update>
	
	<delete id="delete" parameterType="member">
		DELETE
			  FROM
			       MEMBER
			 WHERE
			       USERID = #{userId}
			   AND
			       USERPWD = #{userPwd}
	</delete>
		      
</mapper>
